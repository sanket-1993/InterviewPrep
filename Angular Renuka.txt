In programming, a lexical environment, also known as a scope, is a data structure that holds variable and function declarations 
  and defines the rules for how these identifiers are accessed and resolved. 
  It is associated with a specific point in the source code during the lexical analysis phase.

Lexical environments play a crucial role in determining the visibility and lifetime of variables and functions within a program. 
 They define the scope chain and provide the context for resolving identifiers and accessing their values.

A lexical environment consists of two main components:

Environment Record: It is a record or data structure that stores variable and function declarations within a specific scope. 
This includes information such as the variable name, its value, and whether it is mutable (can be reassigned). 
The environment record serves as a lookup table for resolving identifiers within the lexical scope.

Outer Environment Reference: It references the lexical environment of the parent or outer scope. This reference allows for 
the creation of nested scopes and establishes the scope chain, which is the order in which lexical environments are searched 
to resolve identifiers.
--------------------------
What is closure?

a closure is a combination of a function and the lexical environment within which that function was defined. 
	It allows a function to access and manipulate variables from its outer (enclosing) scope, even after the outer function 
		has finished executing.
		
		function outer() {
				var outerVar = 'I am from the outer function';

					function inner() {
						console.log(outerVar);
					}

				return inner;
		}

		var closureFunc = outer(); // Assign the inner function to a variable

		closureFunc(); // Output: "I am from the outer function"
In this example, the outer function defines a variable outerVar and declares an inner function inner that logs the value of 
 outerVar to the console.

When outer is invoked and assigned to the variable closureFunc, it returns the inner function. The key aspect here is that 
 the inner function maintains a reference to its outer lexical environment, even though outer has finished executing. 
 This reference includes all the variables and their values in the scope of outer at the time of inner function creation.

When closureFunc is called later, it can still access and access the variable outerVar from its enclosing scope, even though 
outer has completed execution. This is the essence of a closure—capturing and preserving the variables and their values from 
the outer scope for later use.

Closures are powerful because they allow for data encapsulation and the creation of private variables. The inner function has 
access to the outer function's variables but prevents direct modification by external code. This concept is widely used in functional programming and can be employed to implement techniques like currying, memoization, and more

------------------------------------------

difference between component and directive
	- Directives add behaviour to an existing DOM element or an existing component instance
	- Write a component when you want to create a reusable set of DOM elements of UI with custom behaviour. 
	- Write a directive when you want to write reusable behaviour to supplement existing DOM elements.
	
	Components:

    Components are self-contained and reusable building blocks that encapsulate the presentation and behavior of a part 
	of the user interface.
    They are typically associated with a template that defines the structure and layout of the component.
    Components have their own data and logic and can maintain internal state.
    Components can communicate with other components using input and output properties or events.
    Examples of component-based frameworks are Angular and Vue.js.
	
	Directives:

	Directives are markers or instructions that augment the behavior or appearance of elements in the DOM (Document Object Model).
	They can modify the structure or behavior of HTML elements to provide additional functionality.
	Directives can be classified into two types: structural directives and attribute directives.
	Structural directives, such as *ngIf or *ngFor in Angular, modify the DOM by adding or removing elements based on conditions.
	Attribute directives, such as ngStyle or ngClass in Angular, change the appearance or behavior of elements by manipulating their 
	 attributes.
	Directives are often used to extend the capabilities of HTML and create reusable custom behaviors.
	Examples of directive-based libraries are Angular, where directives play a significant role, and React, where directives are 
	referred to as "props" and "JSX."
	
	In summary, components are higher-level building blocks that encapsulate complete UI parts, while directives are instructions 
	 applied to elements in the DOM to modify their behavior or appearance. 
	 Components are self-contained entities with their own logic, data, and template, while directives are used to extend 
	 or modify existing HTML elements or provide custom behaviors.
------------------------------------------
How many components can be present per DOM element
	- In angular life cycle hook every component is destroyed when new component load.
	In most component-based frameworks, such as Angular or React, each DOM element can have only one component associated with it. This is because components represent self-contained entities that encapsulate their own logic, data, and template, and they are typically designed to manage a specific portion of the user interface.

	When rendering components, they are usually mapped to specific elements in the DOM hierarchy. Each component instance is 
	responsible for rendering its associated template and managing the behavior of the corresponding DOM element.
	
	While it's not possible to have multiple components directly associated with a single DOM element, it is possible to have 
	nested components, where one component contains another as a child. This allows for the composition of complex UI structures 
	by combining multiple components together. In such cases, each component manages its own portion of the DOM and can have 
	its own child components.
	
------------------------------------------	
How many Directives can be present per DOM element
	- Many directives can be used per DOM element.
	you can apply multiple directives to a single DOM element. The number of directives that can be applied depends on 
	the specific framework or library you are using and the directives themselves.
-------------------------------------

Which decorator is used to create component/directive

@Component({
	selector:'',
	template/templateURLs:'',
	styleUrls:'',
	encapsulation:
})

@Directive({
	selector: "[logOnClick]",
    hostListeners: {
        'click': 'onClick()',
    },
})

-------------------------------------
What is module
In Angular, a module is a mechanism to group components, directives, pipes and services that are related, 
in such a way that can be combined with other modules to create an application.
------------------------------------
To create a module which decorator is used ?

 @NgModule({
	imports:[],
	exports:[],
	delcarations:[],
	providers:[],
	entryComponents:[]
 })
------------------------------------
What are five important options which is present under @NgModule decorator & what it means
Imports,exports, declarations, bootstrap, providers,entryComponents
Imports: The imports property is used to import other modules into the current module. This allows for the reusability of components, 
 directives, and services defined in other module.

Exports: The exports property specifies the components, directives, or pipes that are accessible to other modules that import 
 the current module. This allows for the reusability of the module's artifacts in other parts of the application.
 
entryComponents: 
An entry component is any component that Angular loads imperatively, 
(which means you’re not referencing it in the template), by type. You specify an entry component by bootstrapping it in an NgModule, 
or including it in a routing definition.

So this means that any component you have in the bootstrap array, or have defined in a route, is immediately an entryComponent. 
This is because you do not reference these inside any template. 
This prevents the compiler to treeshake these components out of the module.
Also -->
The entryComponents property is used to define components that are dynamically created at runtime, such as 
 through the use of ComponentFactoryResolver. This property is typically used in scenarios like dynamic component loading or 
 when using Angular's dynamic rendering features.
 
bootstrap:
A bootstrapped component is an entry component that Angular loads into the DOM during the bootstrap process (application launch). 
Other entry components are loaded dynamically by other means, such as with the router.

Though these two mechanisms account for most entry components, if your app happens to bootstrap or dynamically load a component 
by type imperatively, you must add it to entryComponents explicitly.
-------------------------------------
What is difference between entryComponents and bootstrap?

entryComponents is used for components that are dynamically created at runtime, while bootstrap is used to specify the root component
 of the application that is loaded when the application starts. The components listed in entryComponents may not be statically
 referenced in templates, while the components listed in bootstrap are the entry points that trigger the Angular application's
 initialization process
-------------------------------------
What is lazy loading ? How many modules are present in your project ? 

Lazy loading is a technique used in software development, particularly in web applications, to optimize the loading and performance 
 of an application by deferring the loading of certain resources or modules until they are actually needed. It allows for the 
  on-demand loading of specific parts of an application, rather than loading the entire application upfront.

In the context of web development, lazy loading is commonly associated with JavaScript frameworks like Angular, React, or Vue.js. 
 These frameworks provide mechanisms to divide an application into smaller, modular pieces called modules or chunks. 
  Lazy loading allows these modules to be loaded asynchronously, typically when the user navigates to a specific route or triggers
   a specific action.

The main benefits of lazy loading include:

Improved Initial Page Load Time: By loading only the essential resources required for the initial view of the application, 
 lazy loading helps reduce the initial page load time. This can enhance the user experience, especially for applications with
  large codebases.

Reduced Network Bandwidth: Lazy loading allows for the fetching of additional resources, such as code modules or data, on-demand
 as the user interacts with the application. This reduces the amount of data transferred initially, resulting in improved
  network efficiency and reduced bandwidth consumption.

Faster Application Startup: By loading only the necessary resources for the initial view and deferring the loading of other
  parts until they are required, lazy loading helps to accelerate the application startup time. This can result in quicker
   interactivity and responsiveness.

Modular Code Organization: Lazy loading encourages modular code organization, as the application can be divided into separate
  modules that are loaded independently. This promotes code maintainability, reusability, and separation of concerns.

Better Performance on Low-bandwidth or Mobile Networks: Lazy loading is particularly beneficial for users on low-bandwidth or
  mobile networks, where reducing the initial load size and optimizing resource fetching can significantly improve the
   application's performance.

Lazy loading can be implemented using various techniques, depending on the framework being used. For example, in Angular,
 lazy loading is achieved by configuring the application's routing module to load specific modules on-demand using the
  loadChildren property. Similarly, React supports lazy loading through the React.lazy() function and the Suspense component.

Overall, lazy loading is a powerful optimization technique that helps improve application performance, reduce resource
 consumption, and enhance the user experience by loading parts of an application when they are actually needed.
inside app.module.ts

const route = [
    {
        path: 'xo',
        loadChildren: () => import('./xo/xo.module').then(module => module.XoModule)
    }
]

inside xo.routing.module.ts

const route =[
path: '',
        component: XoComponent,
        canActivate: [XoRouteGuardService],
		children: [
		{
                path: 'project-admin',
                canActivate: [XoRouteGuardService],
                data: {
                    title: 'Project Administration',
                    access: XORouteAccess.ProjectAccess
                } as RouteDataOptions,
                loadChildren: () => import('./xo-project-admin/xo-project-admin.module').then(module => module.XoProjectAdminModule)
            }
		]
]

------------------------------------------------------
How do you pass data/use components from one module to another module ?

use service at root level .. dont include it in peovider array else you will have new instance of service.


------------------------------------------------------

Are you aware about lifecycle hooks ? which one you have used in your projects

Angular offers eight lifecycle hooks to allow you to tap into lifecycle of directive or components as they are created, 
	updated and destroyed.
	
Angular calls these hooks methods in following order --

1.ngOnChanges - This hook is called when one or more data-bound input properties of a component change. It receives a SimpleChanges object containing 
	the previous and current values of the changed properties.
2.ngOnInit - This hook is called once after the first ngOnChanges hook is called and before the component's template is rendered. It is used for 
	initialization logic such as retrieving data from a server or initializing component properties.
3.ngDoCheck - Called immediately after ngOnChanges() on every change detection run, and immediately after ngOnInit() on the first run.
	This hook is called during every change detection cycle and allows you to implement custom change detection logic. It is typically used 
		for advanced use cases where you need fine-grained control over change detection.
4.ngAfterContentInit - Called after component content initailized. This hook is called after the component's content, projected through ng-content, 
	has been initialized
5.ngAfterContentChecked - This hook is called after the component's projected content has been checked for changes.
6.ngAfterViewInit -Called after component's and child's views has been initailized.This hook is called after the component's view has been fully 
	initialized.
7.ngAfterViewChecked -called every time after components and childs views has been checked.This hook is called after the component's view has been 
	checked for changes.
8.ngOnDestry - This hook is called just before the component is destroyed. It is used for cleaning up resources, unsubscribing from observables, or 
	performing any necessary teardown logic.
------------------------------------------------------
difference between constructor and ngOninit, purpose of NgOndestroy,

The main difference between constructor and ngOnInit is that ngOnInit is lifecycle hook and runs after constructor.
Component interpolated template and input initial values aren't available in constructor, but they are available in ngOnInit
Constructor is used mainly for DI and ngOnInit used for Async operations and datat binding. async ngOnInit{await service.data();}

the constructor is a standard TypeScript method used for dependency injection and basic initialization tasks, while ngOnInit is an Angular lifecycle 
 hook specifically designed for component initialization and is the recommended place to perform initialization logic. 
 The constructor is called before ngOnInit, and they serve different purposes in the component's lifecycle.
 
 
difference between ngOnChanges & ngDoCheck

ngOnChanges is specifically for handling changes to input properties, while ngDoCheck allows for custom change detection logic during 
	every change detection cycle. ngOnChanges is triggered when input properties change, whereas ngDoCheck is executed on each change 
	detection cycle, providing more flexibility for implementing custom change detection and performing advanced change tracking operations.

purpose of NgOndestroy -

Cleanup just before Angular destroys the directive or component. 
Unsubscribe Observables and detach event handlers to avoid memory leaks.
------------------------------------------------------
Which one gets called first ngOninit or ngOnChanges?
First ngOnChanges will be called then after first ngOnChanges ngOnInit will be called.
------------------------------------------------------
How many bindings you have used in you projects

Interpolation {{}}
Interpolation enables you to display dynamic data in your templates by evaluating expressions and displaying their values in the rendered HTML. 
The expressions can include component properties, method calls, or even more complex expressions involving operators, conditionals, and template 
variables.

Property Binding ([]): Property binding allows you to set an element's property value based on a component property. 
It binds a target element property to a value or expression in the component. It is denoted by square brackets. For example:
<button [disabled]="isDisabled">Click me</button>

Event Binding (()): Event binding allows you to handle user events (such as clicks, key presses, etc.) and trigger actions in the component. 
It binds a target element event to a method or function in the component. It is denoted by parentheses. For example:
<button (click)="onClick()">Click me</button>

Two-Way Binding ([()]): Two-way binding allows you to establish a two-way communication between a property in the component and an input control (
e.g., input, select). It combines both property binding and event binding. It is denoted by square brackets with parentheses. For example:
<input [(ngModel)]="name" />

--------------------------------------

Decorators ? 
In the context of Angular, decorators are extensively used to define and configure various aspects of Angular components, services, directives, 
 and more. Angular provides several built-in decorators, and you can also create custom decorators to extend the functionality of your application.
 
An Angular Decorator is a function, using which we attach metadata to a class, method, accessor, property, or parameter. 
We apply the decorator using the form @expression, where expression is the name of the decorator.

There are four main types of angular decorators:

	- Class decorators, such as @Component, @Directive, @NgModule, @Injectable and @Pipe
	- Property decorators for properties inside classes, such as @Input, @Output, @ViewChild & @ViewChildren.
	- Method decorators for methods inside classes, such as @HostListener
	- Parameter decorators for parameters inside class constructors, such as @Inject, @Host

	
What is the syntax/command to create class/pipe/enum/directive/module/service ?
export enum Event {} 

@Pipe({
    name: 'timeOffset'
})
export class TimeOffsetPipe implements PipeTransform {

    public transform(value: number): string {
	}
}

@Directive({
    selector: '[nxContextMenuToggle]',
})
export class XOContextMenuDirective implements OnInit, OnDestroy {
}

@Injectable({
	providedIn: 'root'
})

providedIn: 'root' specifies that Angular should provide the service in the root injector.
providedIn: UserModule

@ngModule({
	exports:[],
	imports:[],
	declarations:[],
	providers:[],
	bootstrap:[],
	entryComponents:[]
})

-----------------------------------

How do you pass data from one component to other

Input/Output bindings:
If the components have a parent-child relationship, you can use input and output bindings to pass data between them.
The parent component can bind a property of the child component using the [property]="value" syntax to pass data to the child.
The child component can emit events using the @Output decorator and the (event)="handler()" syntax to send data back to the parent.
This method is useful for passing data and triggering actions between closely related components.

Service:
Components can share data through a shared service by injecting the service into both components.
The service can have properties or methods to store and manipulate the data.
One component can set the data in the service, and the other component can access it.
This approach is suitable for components that don't have a direct parent-child relationship or when the data needs to be shared across multiple 
 components.

Routing parameters:
If the components are associated with different routes, you can pass data through route parameters.
The data can be included as route parameters when navigating from one component to another.
The receiving component can read the route parameters using the ActivatedRoute service.
This method is useful for passing data when navigating between different views or components.

Local storage or session storage:
If the data needs to persist across multiple page loads or sessions, you can store it in the browser's local storage or session storage.
One component can save the data to the storage, and the other component can retrieve it.
This approach is suitable for scenarios where data needs to be shared across different instances of the application.

Event bus or message service:
You can create a centralized event bus or message service that allows components to publish and subscribe to events or messages.
One component can publish an event or message, and other components that are subscribed to it can receive the data.
This method is useful for communication between loosely coupled components or when multiple components need to be notified of changes.


generally if there is no strcturing between then then use pub-sub model
Parent to child ? @Input() 
Child to parent ? @Output()
Sibling components - One child to parent then parent to another child.. Or Viewchild but viewchild allowed in ngAfterViewInit hook
If there is no connection between components -> use behavour subject
-----------------------------------
Dependency injection ?

Angular's DI framework provides dependencies to a class upon instantiation. 
Use Angular DI to increase flexibility and modularity in your applications.

The @Injectable() decorator specifies that Angular can use this class in the DI system. 
The metadata, providedIn: 'root', means that the HeroService is visible throughout the application.

Injecting services

To inject a dependency in a component's constructor(), supply a constructor argument with the dependency type

We can user one service in another.

Yes, in Angular, you can use one service in another service or component by injecting the dependent service as a dependency. 
Dependency injection is a core feature of Angular that allows you to create loosely coupled and reusable components/services.
----------------------------------
How do you use service ? What is the purpose of service ?
----------------------------------
What is observables ? 

Observables provide support for data sharing between publishers and subscribers in an angular application. 
	It is referred to as a better technique for event handling, asynchronous programming, and handling multiple 
	values as compared to techniques like promises.

A special feature of Observables is that it can only be accessed by a consumer who subscribes to it i.e A function 
	for publishing values is defined, but it is not executed by the subscribed consumer (it can be any component) only 
	via which the customer can receive notifications till the function runs or till they subscribed.

An observable can deliver multiple values of any type. The API for receiving values is the same in any condition and the setup 
	and the logic are both handled by the observable. Rest thing is only about subscribing and unsubscribing the information required.
	
------------------------------------------
What is the purpose of *ngIf ? what is the difference between display:none & *ngIf

display:none; will remove the DOM elements visual style / physical space from the DOM, Not completely the element itself. 
Which can be replaced with the attribute [Hide] in angular.

whereas *ngIf is a angular builtin directive which and *ngIf if false will remove the element from the DOM.
------------------------------------------------
What happens if you use script tag inside template
<div><script>alert(‘ dangerous ’)</script></div>
How to inject dynamic script in angular
Interpolation ? can we use (==,+=,-=, new, ++,--, |, &) inside template expression/interpolation
------------------------------------------------
What are pipes?
They are a simple way to transform values in an Angular template

Custom pipe ? difference between pure & impure pipe ?
A pure pipe is only called when Angular detects a change in the value or the parameters passed to a pipe. 
An impure pipe is called for every change detection cycle no matter whether the value or parameter(s) changes.

------------------------------------------------
What is bootstrapping module
How do you perform error handling ?
What are dynamic components

-----------------------------------------------
Purpose of wildcard route?

The Wildcard Route is basically used in Angular Application to handle the invalid URLs. 
Whenever the user enter some invalid URL or if you have deleted some existing URL from your application, then by default 404 page 
not found error page is displayed. In such scenarios instead of showing the default error page, if you also show a custom error page 
and this is possible by using the Angular Wildcard Route.

A Wildcard route has a path consisting of two asterisks (**). It matches every URL, the router will select this route 
if it can’t match a route earlier in the configuration. A Wildcard Route can navigate to a custom component or can redirect 
to an existing route. The syntax to use Wildcard Route is given below.

{
	path:'**',component:CustomErrorComponent
}

What should be the Order of Angular Routes?
The order of the routes is very important. When matching routes find, the angular router uses first-match wins strategy. 
So more specific routes should be placed above less specific routes. 
So, Routes with a static path should be placed first, followed by the empty path route, that matches the default route. 
THE WILDCARD ROUTE SHOULD BE THE LAST ROUTE IN YOUR ROUTER CONFIGURATION
-----------------------------------------------
Do I always need a routing module?
No, the Routing Module is a design choice. You can skip routing Module (for example, AppRoutingModule) when the configuration is simple
and merge the routing configuration directly into the companion module (for example, AppModule). But it is recommended 
when the configuration is complex and includes specialized guard and resolver services.
----------------------------------------------
Compilation types ? JIT?AOT? What is the default compilation type? Difference between them ? Why do we need a compilation process ?

			JIT											|| AOT
JIT downloads the compiler and compiles code exactly 	|| AOT has already complied with the code while building your application, 
before Displaying in the browser.						|| so it doesn’t have to compile at runtime.
														|| 
Loading in JIT is slower than the AOT because it 		|| Loading in AOT is much quicker than the JIT because it 
needs to compile your application at runtime.			|| already has compiled your code at build time.
														|| 
JIT is more suitable for development mode.				|| AOT is much suitable in the case of Production mode.
														|| 
Bundle size is higher compare to AOT.					|| Bundle size optimized in AOT, in results AOT bundle size 
														|| is half the size of JIT bundles.
														|| 
ng build OR ng serve									|| ng build --aot OR ng serve --aot
														|| 
You can catch template binding error at display time.	|| You can catch the template error at building your application.														
-----------------------------------------------
How to declare nullable variables in angular ? user?:User
----------------------------------------------- 
What is a service worker in angular?
 Service workers augment the traditional web deployment model and empower applications to deliver a user experience with the reliability
 and performance on par with code that is written to run on your operating system and hardware.
 
 Adding a service worker to an Angular application is one of the steps for turning an application into a Progressive Web App 
 (also known as a PWA).
 
 At its simplest, a service worker is a script that runs in the web browser and manages caching for an application.
 
 Service workers function as a network proxy. They intercept all outgoing HTTP requests made by the application 
 and can choose how to respond to them. 
 For example, they can query a local cache and deliver a cached response if one is available.
 
 Unlike the other scripts that make up an application, such as the Angular application bundle, the service worker 
 is preserved after the user closes the tab. The next time that browser loads the application, the service worker loads first, 
 and can intercept every request for resources to load the application. 
 If the service worker is designed to do so, it can completely satisfy the loading of the application, 
 WITHOUT THE NEED FOR THE NETWORK.
 
 Step 1 
 Add the @angular/service-worker package to our application by using npm install command
 
 Step 2
 We need to enable the service worker to build support in the CLI.
 
 "serviceworker":true
 "ngswConfigPath":"ngsw-config.json"
 
 Step 3 
 Imports and register the service worker in the app module.
 
 @NgModule({
	import:[
	ServiceWorkerModule.register('ngsw-config.json',{enabled: environame.production})
	]
 })
 
 Step 4 
	Create the service worker configuration file called ngsw-config.json which mainly specify 
	all caching behaviors and other setting related to the service worker.
	
	
	{  
	"$schema": "./node_modules/@angular/service-worker/config/schema.json",  
	"index": "/index.html",  
	"assetGroups": [  
		{  
		"name": "app",  
		"installMode": "prefetch",  
		"resources": {  
			"files": [  
			"/favicon.ico",  
			"/index.html",  
			"/manifest.webmanifest",  
			"/*.css",  
			"/*.js"  
			]  
		}  
		},  
		{  
		"name": "assets",  
		"installMode": "lazy",  
		"updateMode": "prefetch",  
		"resources": {  
			"files": [  
			"/assets/**",  
			"/*.(eot|svg|cur|jpg|png|webp|gif|otf|ttf|woff|woff2|ani)"  
			]  
		}  
		}  
	]  
	}  
----------------------------------------------- 
What is an angular router ?

Router outlet?

 - Router-outlet in Angular works as a placeholder which is used to load the different components dynamically based on the 
 - activated component or current route state. Navigation can be done using router-outlet directive and the activated 
 - component will take place inside the router-outlet to load its content.
 
 <router-outlet></router-outlet>  
Router links?

 - RouterLink is a built-in Angular Directive that lets you link to specific routes in your app. In the SPA
 - (single-page application), you change what the user sees by showing or hiding portions of the display that 
 - correspond to particular components, rather than going out to the server to get a new page.
 
 If there is a static link, you can use the directive as follows: <a routerLink=”/customer/21″>link to cust component</a>

Active router links?
Router events?

	 - NavigationStart: Navigation starts.
	 - RouteConfigLoadStart: Before the router lazy loads a route configuration.
	 - RouteConfigLoadEnd: After a route has been lazy loaded.
	 - RoutesRecognized: When the router parses the URL and the routes are recognized.
	 - GuardsCheckStart: When the router begins the guards phase of routing.
	 - ChildActivationStart: When the router begins activating a route's children.
	 - ActivationStart: When the router begins activating a route.
	 - GuardsCheckEnd: When the router finishes the guards phase of routing successfully.
	 - ResolveStart: When the router begins the resolve phase of routing.
	 - ResolveEnd: When the router finishes the resolve phase of routing successfully.
	 - ChildActivationEnd: When the router finishes activating a route's children.
	 - ActivationEnd: When the router finishes activating a route.
	 - NavigationEnd: When navigation ends successfully.
	 - NavigationCancel: When navigation is canceled.
	 - NavigationError: When navigation fails due to an unexpected error.
	 - Scroll: When the user scrolls.
------------------------------------------------
What is angular material

------------------------------------------------
What is HTTPClient , HTTP interceptor ?

HttpClient is a built-in module that provides a powerful way to send HTTP requests and handle responses. It is used for making HTTP calls to
 a server-side API or other web services. The HttpClient module is part of @angular/common/http package and provides a higher-level abstraction
 for working with HTTP in Angular applications.

Sending HTTP requests: It provides methods like get(), post(), put(), delete(), etc., for making various types of HTTP requests.

Handling response data: It allows you to handle the response data in different formats such as JSON, text, or blobs. You can also configure request
 headers, URL parameters, and request options.

Observables-based API: The HttpClient returns an Observable for HTTP requests, which allows you to work with the response asynchronously using
 operators like map, filter, catchError, etc.
 
 
HTTP interceptors are a powerful feature in Angular that allow you to intercept outgoing HTTP requests and incoming responses. An HTTP interceptor
 is a service that sits between the HttpClient and the actual server, providing a way to inspect, modify, or handle the request and response
 before they reach the client or server. 
 
Interceptors are useful for implementing cross-cutting concerns such as authentication, logging, error handling, adding headers, or
 modifying requests and responses globally across an application.
 
intercept(): This method intercepts an outgoing request or incoming response. It receives the request or response, performs any necessary processing
 or modifications, and returns an Observable that represents the intercepted request or response.

(Optional) handle(): This method continues the request/response chain by passing the request or response to the next interceptor or the final
 HttpClient handler. This method is called if the interceptor chooses to skip or not modify the request/response.
------------------------------------------------

security & performance
------------------------------------------------
What is shadow dom?

Shadow DOM, which stands for "Shadow Document Object Model," is a web standard that provides encapsulation and scoping for HTML, CSS, and 
JavaScript within a single DOM tree. It allows you to create isolated DOM subtrees with their own styling and behavior, separate from the main 
document's DOM.