The Open Web Application Security Project (OWASP) is a non-profit foundation dedicated to improving the security of software. 
OWASP operates under an ‘open community’ model, where anyone can participate in and contribute to projects, events, online chats, 
and more.

1.Injection. A code injection occurs when invalid data is sent by an attacker into a web application. 
	The attacker’s intent in doing so is to make the application do something it was not designed to do.
	
Example: SQL injection is one of the most common injection flaws found in applications. SQL injection flaws 
		 -=can be caused by use of untrusted data by an application when constructing a vulnerable SQL call.

2.Denial of service - large number of anonymous request received on server. Server gets slow and unresponding due to handling of multiple
request.

3.Cross-Site Scripting (XSS). XSS attacks occur when an application includes untrusted data on a webpage. 
Attackers inject client-side scripts into this webpage.

Example: Untrusted data in an application allow for an attacker to ‘steal a user session’ and gain access to the system.

4.Cross site request forgery (CSRF), also known as XSRF, Sea Surf or Session Riding, is an attack that 
tricks a web browser into executing an unwanted action in an application to which a user is logged in.

CSRFs are typically conducted using malicious social engineering, such as an email or link that tricks the victim into sending a 
forged request to a server. As the unsuspecting user is authenticated by their application at the time of the attack, it’s impossible 
to distinguish a legitimate request from a forged one.

For example, a typical GET request for a $100 bank transfer might look like:

GET http://netbank.com/transfer.do?acct=PersonB&amount=$100 HTTP/1.1

A hacker can modify this script so it results in a $100 transfer to their own account. 
Now the malicious request might look like:

GET http://netbank.com/transfer.do?acct=AttackerA&amount=$100 HTTP/1.1

A bad actor can embed the request into an innocent looking hyperlink:

<a href="http://netbank.com/transfer.do?acct=AttackerA&amount=$100">Read more!</a>

Next, he can distribute the hyperlink via email to a large number of bank customers. 
Those who click on the link while logged into their bank account will unintentionally initiate the $100 transfer.

Note that if the bank’s website is only using POST requests, it’s impossible to frame malicious requests using a <a> href tag. 
However, the attack could be delivered in a <form> tag with automatic execution of the embedded JavaScript.

<body onload="document.forms[0].submit()">
   <form action="http://netbank.com/transfer.do" method="POST">
     <input type="hidden" name="acct" value="AttackerA"/>
     <input type="hidden" name="amount" value="$100"/>
     <input type="submit" value="View my pictures!"/>
   </form>
 </body>

The OWASP Top Ten is a list of the most critical security risks that web applications commonly face. It is published by the Open Web Application Security Project (OWASP), a non-profit organization dedicated to improving the security of software applications. The OWASP Top Ten provides developers, security professionals, and organizations with an awareness of the most prevalent and impactful web application security risks.

The current version of the OWASP Top Ten (as of my knowledge cutoff in September 2021) is OWASP Top Ten 2017. It highlights the following security risks:

1. Injection: Injection vulnerabilities occur when untrusted data is sent to an interpreter as part of a command or query, 
	which can lead to unintended or malicious execution of commands.

2. Broken Authentication: This risk relates to issues in the authentication and session management processes, including 
	weak passwords, inadequate session expiration, and session hijacking.

3. Sensitive Data Exposure: This category encompasses vulnerabilities that could expose sensitive data, such as credit card numbers, 
	passwords, or personal information, due to weak encryption, inadequate access controls, or improper handling.

4. XML External Entities (XXE): XXE vulnerabilities occur when an application processes XML input that contains external entity 
	references, allowing attackers to access internal files, perform remote code execution, or conduct denial-of-service attacks.

5. Broken Access Control: This risk refers to inadequate or misconfigured access controls that allow unauthorized users to access 
	privileged functionality or sensitive data.

6. Security Misconfigurations: Security misconfigurations arise when systems, frameworks, or web applications are deployed with 
	default or insecure configurations, leading to vulnerabilities that can be exploited by attackers.

7. Cross-Site Scripting (XSS): XSS vulnerabilities occur when web applications allow untrusted data to be included in web pages, 
	leading to the execution of malicious scripts in users' browsers.

8. Insecure Deserialization: Insecure deserialization vulnerabilities arise when an application deserializes untrusted or 
	manipulated data, potentially resulting in remote code execution, injection attacks, or other malicious activities.

9. Using Components with Known Vulnerabilities: This risk pertains to the use of software components, libraries, or frameworks 
	that have known security vulnerabilities, as attackers can exploit these vulnerabilities to compromise the application.

10. Insufficient Logging and Monitoring: Inadequate logging and monitoring can make it difficult to detect security incidents, 
	investigate attacks, or identify abnormal activities, thus hindering incident response and recovery efforts.

The OWASP Top Ten is regularly updated to reflect emerging security risks and advancements in the threat landscape. 
	It serves as a valuable resource for developers and organizations to prioritize and address web application security concerns.