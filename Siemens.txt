"Sanket salunkhe \n\r"

If there are 10 \ charactes in string. How can you escape them

string s = @"Test\"; verbatim string
-------------------------
coding example  -->

"Hello World" ==> "World Hello"

-------------------------
What is API Throttling?

API throttling is the process of limiting the number of API requests a user can make in a certain period. 
An application programming interface (API) functions as a gateway between a user and a software application. 
For example, when a user clicks the post button on social media, the button click triggers an API call. 
This API interacts with the web server of the social media application and performs the action of posting. 
This user could be a human or another software application.

Why do Businesses Need API Throttling?

APIs are one of the biggest assets of organizations. APIs help the users of a website or mobile applications fulfil their tasks. 
As the number of users increases, the websites or the mobile application starts showing the signs of performance degradation. 
As a result, users with better connections or faster interfaces might get a better experience than others. 
API throttling is an elegant solution that helps organizations to ensure fair use of their APIs.

API throttling also helps to fight back denial of service (DoS) attack, 
where a malicious user sends enormous volumes of requests to bring down a website or a mobile application. 
As the number of online users increases, businesses need to implement API throttling mechanisms to ensure fair usage, data security, 
and prevent malicious attacks.

How Does API Throttling Work?
While there are various algorithms for API throttling, here are the basic steps in any API throttling algorithm:

	- A client/user calls an API that interfaces with a web service or application.
	- The API throttling logic checks if the current request exceeds the allowed number of API calls.
	- If the request is within limits, the API performs as usual and completes the user’s task.
	- If the request exceeds the limit, the API returns an error response to the user.
	- The user will have to wait for a pre-agreed time period, or pay to make any more API calls.
	
What Are the Benefits of API Throttling?
API throttling is a technique essential to all organizations that expose their services through APIs.

Performance
API throttling prevents the degradation of system performance by limiting the excess usage of an API. 
If an application has millions of users, a system might get a huge number of API requests per second. 
Servicing all those API requests will slow down the system and affect its performance. 
API throttling ensures that every user receives the performance ensured in the service level agreement (SLA).

Security
An API throttling system acts as a gateway to an API. It helps to prevent the denial of service (DoS) attacks. 
In DoS, an attacker issues a massive number of service requests so that the service becomes unavailable to the legitimate users. 
By limiting the total number of service requests, API throttling helps to prevent DoS attacks.	

public class ThrottleAttribute : ActionFilterAttribute

 public override void OnActionExecuting(HttpActionContext actionContext)
        {
            var key = string.Concat(Name, "-", GetClientIp(actionContext.Request));
            var allowExecute = false;

            if (HttpRuntime.Cache[key] == null)
            {
                HttpRuntime.Cache.Add(key,
                    true, // is this the smallest data we can have?
                    null, // no dependencies
                    DateTime.Now.AddSeconds(Seconds), // absolute expiration of cache after 5 seconds
                    Cache.NoSlidingExpiration,
                    CacheItemPriority.Low,
                    null); // no callback

                allowExecute = true;
            }

            if (!allowExecute)
            {
                if (string.IsNullOrEmpty(Message))
                {
                    Message = "You may only perform this action every {n} seconds.";
                }

                actionContext.Response = actionContext.Request.CreateResponse(
                    HttpStatusCode.Conflict,
                    Message.Replace("{n}", Seconds.ToString())
                );
            }
        }
-------------------------
String is immutable and explain why it is immutable?

	A string is a reference data type in C#. A string is a sequential collection of characters that is used to represent text. 
	The value of the String object is the content of the sequential collection of System.Char objects, 
	and that value is immutable (that is, it is read-only).

Why does CLR create a new object instead of modifying the existing object?

	Before going to answer this question, first we need to know the data structure which is used to store the string in memory. 
	As we know that the string is a collection of characters, Array data structure is used to store the string 
	into memory in the form of character array.
	
Array

	- Array is a data structure which is used to store the collection of elements
	- Array size is defined on creation itself. We cannot modify the size of the array dynamically.
	
	string testString = "Siva"; // 4 characters
	
	- First, CLR checks the type of the data type. It is a reference type which will be stored into heap memory.
	- Now, CLR need to reserve some amount of memory to store the string value. So it checks the number of characters 
		that exist in the string to; it is 4 (4x2 bytes = 8 bytes) characters.
	- A character array will be created into a heap with the size of 8 bytes and “Siva” will be stored into memory. 
		Let’s assume that the memory location of this is 101.
	- CLR will assign 101 as a memory reference to testString.
	
Modification of string

testString= "SivaSankar"; // 9 characters

	- Practically if CLR tries to fit “SivaSankar” into the same array it cannot store entire value because the array size 
		which was created earlier is of 8 bytes (4 characters).
	- But the new value “SivaSankar” is of 9 characters which cannot fit into 8 bytes array. 
		Even if it fits, CLR still creates a new array because of other reasons mentioned below.
			- A new array will be created and “SivaSankar” will be stored into it. 
				Let’s assume that the memory location of this is 202.
			- Here, we are creating new object instead of modifying existing array which is making string as immutable.
			- CLR will remove the memory reference 101 from testString which will be collected by garbage collector later.
			- Now, CLR will assign 202 as a memory reference to testString.
			- A character array will be created into heap with the size of 8 bytes and “SivaSankar” will be stored into memory.	
	
-------------------------
Cache-Control Header in WebAPI

 ** Install-Package Strathweb.CacheOutput.WebApi2
 
 Now we need to implement our own caching class that will be derived from the ActionFilterAttribute class. 
 If you have worked with various filter actions then most probably you are already familiar with this class. 

		public class WebApiOutputCacheAttribute: ActionFilterAttribute
		{
			private int _timespan;
			// client cache length in seconds  
			private int _clientTimeSpan;
			// cache for anonymous users only?  
			private bool _anonymousOnly;
			// cache key  
			private string _cachekey;
			// cache repository  
			private static readonly ObjectCache WebApiCache = MemoryCache.Default;

			public WebApiOutputCacheAttribute(int timespan, int clientTimeSpan, bool anonymousOnly)
			{
				_timespan = timespan;
				_clientTimeSpan = clientTimeSpan;
				_anonymousOnly = anonymousOnly;
			}

			public override void OnActionExecuting(HttpActionContext ac)
			{
				if (ac != null)
				{
					if (_isCacheable(ac))
					{
						_cachekey = string.Join(":", new string[] { ac.Request.RequestUri.AbsolutePath, ac.Request.Headers.Accept.FirstOrDefault().ToString() });
						if (WebApiCache.Contains(_cachekey))
						{
							var val = (string)WebApiCache.Get(_cachekey);
							if (val != null)
							{
								ac.Response = ac.Request.CreateResponse();
								ac.Response.Content = new StringContent(val);
								var contenttype = (MediaTypeHeaderValue)WebApiCache.Get(_cachekey + ":responsect");
								if (contenttype == null)
									contenttype = new MediaTypeHeaderValue(_cachekey.Split(':')[1]);
								ac.Response.Content.Headers.ContentType = contenttype;
								ac.Response.Headers.CacheControl = setClientCache();
								return;
							}
						}
					}
				}
				else
				{
					throw new ArgumentNullException("actionContext");
				}
			}

			public override void OnActionExecuted(System.Web.Http.Filters.HttpActionExecutedContext actionExecutedContext)
			{
				if (!(WebApiCache.Contains(_cachekey)))
				{
					var body = actionExecutedContext.Response.Content.ReadAsStringAsync().Result;
					WebApiCache.Add(_cachekey, 
									body, 
									DateTime.Now.AddSeconds(_timespan)
					);
					WebApiCache.Add(_cachekey + ":response-ct",
									actionExecutedContext.Response.Content.Headers.ContentType, DateTime.Now.AddSeconds(_timespan)
					);
				}
				if (_isCacheable(actionExecutedContext.ActionContext))
					actionExecutedContext.ActionContext.Response.Headers.CacheControl = setClientCache();
			}

			private bool _isCacheable(HttpActionContext ac)
			{
				if (_timespan > 0 && _clientTimeSpan > 0)
				{
					if (_anonymousOnly)
						if (Thread.CurrentPrincipal.Identity.IsAuthenticated)
							return false;
					if (ac.Request.Method == HttpMethod.Get) return true;
				}
				else
				{
					throw new InvalidOperationException("Wrong Arguments");
				}
				return false;
			}

			private CacheControlHeaderValue setClientCache()
			{
				var cachecontrol = new CacheControlHeaderValue();
				cachecontrol.MaxAge = TimeSpan.FromSeconds(_clientTimeSpan);
				cachecontrol.MustRevalidate = true;
				return cachecontrol;
			}
			
		}
		
We have finished the entire configuration, now we will set the attribute over the action. 
Here is the code of my Get() action within the controller.	

        [WebApiOutputCache(120, 60, false)]	
		
------------------------------------------------		